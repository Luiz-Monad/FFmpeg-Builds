name: Build FFmpeg

on:

  workflow_call:
    inputs:

      buildBase:
        description: 'Only build base image'
        type: boolean
        required: true

      buildTargetBase:
        description: 'Only build target base image'
        type: boolean
        required: true

      buildTargetVariant:
        description: 'Only build target variant image'
        type: boolean
        required: true

      buildFFmpeg:
        description: 'Only build ffmpeg'
        type: boolean
        required: true

      publishRelease:
        description: 'Publish release'
        type: boolean
        required: true

      runner:
        description: 'Job runner'
        required: true
        type: string

      host:
        description: 'Compiler host'
        required: true
        type: string

      target:
        description: 'Compiler target'
        required: true
        type: string

      variant:
        description: 'Build variant'
        required: true
        type: string

env:
  DOCKER_BUILDKIT: 1
  RUNNER: ${{ inputs.runner }}
  TARGET: ${{ inputs.target }}

jobs:

  show_input_values:
    name: Show input values
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Display Input Values
        run: |
          echo "Build Base: ${{ inputs.buildBase }}"
          echo "Build Target Base: ${{ inputs.buildTargetBase }}"
          echo "Build Target Variant: ${{ inputs.buildTargetVariant }}"
          echo "Build FFmpeg: ${{ inputs.buildFFmpeg }}"
          echo "Publish Release: ${{ inputs.publishRelease }}"
          echo "Runner: ${{ inputs.runner }}"
          echo "Host: ${{ inputs.host }}"
          echo "Target: ${{ inputs.target }}"
          echo "Variant: ${{ inputs.variant }}"

  build_base:
    name: Build runner base image
    if: ${{ inputs.buildBase }}
    needs: show_input_values
    runs-on: ${{ inputs.runner }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk-Space
        run: |
          set -e
          ./util/free_disk.sh

      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/runner-${{ inputs.host }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT

      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"

      - name: Build runner base image
        uses: docker/build-push-action@v6
        with:
          context: images/runner-${{ inputs.host }}
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache

      - name: Get download cache key
        id: dl_cache
        if: ${{ inputs.host != 'base' }}
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT

      - name: Cache
        if: ${{ inputs.host != 'base' }}
        uses: actions/cache@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          restore-keys: |
            download-cache-

      - name: Update Cache
        if: ${{ inputs.host != 'base' }}
        run: |
          set -e
          ./download.sh
          ./util/clean_cache.sh
          tar czf .cache/cache.tar.gz .cache/downloads/*

      - name: Upload cache artifact
        if: ${{ inputs.host != 'base' }}
        uses: actions/upload-artifact@v4
        with:
          name: download-cache
          overwrite: true
          path: .cache/cache.tar.gz

      - name: Cleanup
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ github.token }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true

  build_target_base:
    name: Build target base image
    if: ${{ inputs.buildTargetBase }}
    needs: show_input_values
    runs-on: ${{ inputs.runner }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk-Space
        run: |
          set -e
          ./util/free_disk.sh

      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/target-${{ inputs.target }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "gh_repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"

      - name: Build target base image
        uses: docker/build-push-action@v6
        with:
          context: images/target-${{ inputs.target }}
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
          build-args: |
            RUNNER=${{ inputs.runner }}
            GH_REPO=ghcr.io/${{ steps.imagename.outputs.gh_repo }}

      - name: Cleanup
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ github.token }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true

  build_target_variant:
    name: Build target variant image
    if: ${{ inputs.buildTargetVariant }}
    needs: show_input_values
    runs-on: ${{ inputs.runner }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk-Space
        run: |
          set -e
          ./util/free_disk.sh

      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/${{ inputs.target }}-${{ inputs.variant }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "gh_repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Get download cache key
        id: dl_cache
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT

      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"

      - name: Generate Dockerfile
        run: ./generate.sh ${{ inputs.runner }} ${{ inputs.target }} ${{ inputs.variant }}

      - name: Cache
        uses: actions/cache/restore@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          fail-on-cache-miss: true

      - name: Build target variant image
        uses: docker/build-push-action@v6
        with:
          context: .
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache

      - name: Cleanup
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ github.token }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true

  build_ffmpeg:
    name: Build ffmpeg
    if: ${{ inputs.buildFFmpeg }}
    needs: show_input_values
    runs-on: ${{ inputs.runner }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk-Space
        run: |
          set -e
          ./util/free_disk.sh

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build ffmpeg
        run: |
          T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
          ./build.sh ${{ inputs.runner }} ${{ inputs.target }} ${{ inputs.variant }}

      - name: Replace spaces in string
        id: strs
        run: |
          SLUG="${{ inputs.target }}-${{ inputs.variant }}"
          echo "artifact_slug=${SLUG// /-}" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ steps.strs.outputs.artifact_slug }}
          overwrite: true
          path: artifacts/*

  publish_release:
    name: Publish release
    if: ${{ !cancelled() && inputs.publishRelease && needs.build_ffmpeg.result == 'success' }}
    needs: build_ffmpeg
    runs-on: ${{ inputs.runner }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk-Space
        run: |
          set -e
          ./util/free_disk.sh

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-*
          merge-multiple: true
          path: artifacts

      - name: Create release
        id: create_release
        run: |
          set -xe
          shopt -s nullglob
          RELDATE="$(date +'%Y-%m-%d %H:%M')"
          NAME="Auto-Build $RELDATE"
          TAGNAME="autobuild-$(date +'%Y-%m-%d-%H-%M')"
          (cd artifacts && sha256sum *.{zip,tar.xz} > checksums.sha256)
          gh release create "$TAGNAME" --target "master" --title "$NAME" artifacts/*.{zip,tar.xz} artifacts/checksums.*
          echo "tag_name=${TAGNAME}" >> $GITHUB_OUTPUT
          echo "rel_date=${RELDATE}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Update Latest
        run: |
          set -xe
          shopt -s nullglob
          mkdir latest_artifacts
          ./util/repack_latest.sh latest_artifacts artifacts/*.{zip,tar.xz}
          (cd latest_artifacts && sha256sum *.{zip,tar.xz} > checksums.sha256)
          NAME="Latest Auto-Build (${{ steps.create_release.outputs.rel_date }})"
          TAGNAME="latest"
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          sleep 15
          gh release create "$TAGNAME" --target "master" --title "$NAME" latest_artifacts/*
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Update Wiki
        run: ./util/update_wiki.sh artifacts ${{ steps.create_release.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Prune old releases
        run: ./util/prunetags.sh
        env:
          GITHUB_TOKEN: ${{ github.token }}
